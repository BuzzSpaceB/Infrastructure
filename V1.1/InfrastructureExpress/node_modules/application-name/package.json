{
  "name": "application-name",
  "version": "0.0.1",
  "main": "Authorized.js",
  "description": "Package for adding and checking authorization on service requests",
  "dependencies": {
    "mongoose": "^3.8.25"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/BuzzSpaceB/Module"
  },
  "bugs": {
    "url": "https://github.com/BuzzSpaceB/Module/issues"
  },
  "homepage": "https://github.com/BuzzSpaceB/Module",
  "contributors": [
    {
      "name": "Sphelele Malo",
      "email": "ssmalo2@gmail.com"
    },
    {
      "name": "Jessica Lessev",
      "email": "u13049136@tuks.com"
    },
    {
      "name": "Armand Pieterse",
      "email": "u12167844@tuks.co.za"
    },
    {
      "name": "Kale-ab Tessera",
      "email": "kaleabtessera@email.com"
    }
  ],
  "readme": "# Authorization\nAll service requests in Buzz, irrespective of the channel through which they are requested, are to\nbe intercepted by an AuthorizationInterceptor which checks whether the user is authorized to\nuse the service.\n\n\nThis Git Repository will be used to collaborate on the Buzz Space mini project.\n\nOur buzz space name is: D3  -  discuss , debate & deliberate ....\n\n## Project time-line\n- **22 March 11:59PM**: __Core functionality of module complete so integration for demo can begin__ \n- **27 March**: Mid-Implementation Demo\n- **TBA probably in middle of the holiday**: Module complete & final integration\n- **17 April**: Post-Implementation Demo\n- **17 April**: Testing phase teams allocated\n- **24 April**: Final Demo\n\n## What happens now ? \n1. Read this document thoroughly\n2. In your groups identify core functionality for your module \n2. Implement & TEST said core functionality before 22 March 11:59PM (23:59)\n3. Implement & TEST the rest of the functionality \n4. Be done with the mini project and let integration team worry about integrating your excellent work :) \n\n## General remarks\n- ###Independence of node packages/modules:  \nPlease remember that the module you as a team need to deliver needs to be able to run on its own regardless of the user interface in front and/or behind it. \ne.g. Threads should not explicitly output to a html file everything should for example send and receive JSON which could be inserted into any page or file. \nThe interface needs to be completely separate from the business logic. \n\n- ### Testing & web:\nEvery module needs to have multiple unit tests to ensure that it works correctly. The unit tests will provide the module you are writing with \"dummy data\".\nYour module should/will not run a nodeJS web server(except if you want to test it this way), that is what the integration team will do.\n\n- ###Use of external libraries: \nYou may and should use as many libraries as possible to increase code re-use and minimise errors / problems.\n\n### Coding Standard\nPlease follow Google coding standards throughout the implementation of this project.\n- JavaScript Standards: https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\n- HTML and CSS Standards: http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml\n\nWe will be using http://usejsdoc.org/about-getting-started.html to generate documentation for our project. \nSo remember to document your code.\n\n\n### **Version Control** - git and npm\nBoth GitHub and npm will be used to collaborate and perform version control of this project. \nFor more details see the Master Specification document on the CS website. \nYou do not have to add your module to NPM or any repository other than GitHub, as NPM call pull directly from GitHub. \n\nWe ask that you periodically or after reaching some milestone publish a release (with incrementing version number e.g the first release will be v0.0.1 the second v0.0.2 and so on) \nsee https://help.github.com/articles/creating-releases/ for more information.\n\nWe would like everyone to use the flowing template for the package.json file (modify as needed & enter relevant details)\n```\n{\n  \"private\": true,\n  \"main\": \"mainFileName.js\",\n  \"name\": \"ModuleName\",\n  \"description\": \"Module description\",\n  \"version\": \"0.0.1\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/BuzzSpaceB/Module\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/BuzzSpaceB/Module/issues\"\n  },\n  \"homepage\": \"https://github.com/BuzzSpaceB/Module\",\n  \"contributors\": [\n    {\n      \"name\": \"Group Member One\",\n      \"email\": \"group@member.com\"\n    },\n    {\n      \"name\": \"Group Member Two\",\n      \"email\": \"email@group.com\"\n    },\n    {\n      \"name\": \"Group member n\",\n      \"email\": \"n@email.com\"\n    }\n  ],\n  \"dependencies\": {\n      \"body-parser\": \"~1.12.0\",\n      \"broadway\": \"^0.3.6\",\n      \"cookie-parser\": \"~1.3.4\",\n      \"debug\": \"~2.1.1\",\n      \"ejs\": \"~2.3.1\",\n      \"electrolyte\": \"0.0.6\",\n      \"express\": \"~4.12.2\",\n      \"handlebars\": \"^3.0.0\",\n      \"jsreport\": \"^0.2.10\",\n      \"ldapjs\": \"^0.7.1\",\n      \"mongoose\": \"^3.8.25\",\n      \"morgan\": \"~1.5.1\",\n      \"node-aop\": \"^0.1.0\",\n      \"node-cache\": \"^1.1.0\",\n      \"nodemailer\": \"^1.3.2\",\n      \"react\": \"^0.13.1\",\n      \"react-bootstrap\": \"^0.17.0\",\n      \"scribe-js\": \"^2.0.4\",\n      \"serve-favicon\": \"~2.2.0\"\n    }\n}\n\n```\n\n## Technologies we will use\n### **IDE** - WebStorm (version 9)\n\nYou have complete freedom over which IDE you want to use. \nWe do however strongly recommend that everyone uses WebStorm 9. \nWe recommend this because it integrates very well with all the technologies we will be using. \nYou can get WebStorm here: https://www.jetbrains.com/webstorm/download . \nTo get a license key register with your Tuks email account here  https://www.jetbrains.com/estore/students/\n\n\n### **Execution Environment** - Node.js (version 0.12.0)\nNodeJS will be used as an execution environment. \nTo get a better idea of what NodeJS is and how it works, watch this video: https://www.youtube.com/watch?v=pU9Q6oiQNd0\n\n### **HTTP Server** - Express\nYour module will not run a web server, that is what the integration team will manage and run. \nYou need to make sure your code can be \"plugged\" into the greater web server package. \nBut for the sake of completeness our website will run on an HTTP server, and we will be using the Express package for NodeJS to achieve this.\nThe above mentioned video also contains information on this.\nBut please remember your code needs to be independent from the web server.\n\n### **Database** - MongoDB\nWe will be using MongoDB as a database. \nMongoDB is a document database and doesn't make use of relational tables such as SQL. \nDocuments are inserted into the database (like a file system) and each of these documents (like a Thread object, or an image) are indexed so they can be retrieved later.\n\n### **Database Schema** - Mongoose\nMongoose is a package for NodeJS that wraps around the normal NodeJS MongoDB driver. \nMongoose allows us to create a schema for our database, which will validate the documents being inserted into the database. \nThis includes simple things like making sure a new thread being inserted contains all of the right fields, \nand that these fields are of the right data type. More can be read here: http://mongoosejs.com/\n\n### **Dependency Injection** - ElectroLyte __NB NB NB NB __\nFirstly you might ask, what is dependency injection, and why should it be used? \nPlease have a look here: http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html. \nIt is an old article, but it explains it well. \n\nTo make our lives easier, we will use ElectroLyte to handle dependency injection. Read about it here:\nhttps://github.com/jaredhanson/electrolyte\n\nEveryone should be using this, in every module. \n\n### **Aspect Oriented Programming** - node-aop\nWithin the Buzz System many requests will have to be intercepted. \nFor example, if a user clicks on a button to submit a post, \nthat request has to be intercepted to first check if the user is authorized to make this post. \nIn this case an AuthorizationInterceptor will be used. \nBut how will we achieve this? The answer is Aspect Oriented Programming. \nIt allows you to intercept function calls. \n\nWe will be using node-aop as a NodeJS package to achieve this: https://www.npmjs.com/package/node-aop\n\nThe integration teams will mostly deal with this. \n\n### **Modular design** - Broadway\nEach team will be working on a module of the system, and each of these modules will have to integrate with each other. \nFor this we will be using the Broadway plug-in framework. \nThis should be of interest to the middle and top level integration teams, \nbut lower level teams need to make sure Broadway is compatible with what they did. \n\nMore can be read about it here: https://github.com/flatiron/broadway\n\n### **Templates** - HandleBars\nSome modules require a or part of a web front end. \nAll of these front end parts will have to integrate in to one web GUI (by the integration team). \nThis is a difficult task, and  we'll be using templates so that styling and layout is kept consistent and pluggable. \nWe will be using handlebars for this. Read more here: http://handlebarsjs.com/\n\nRemember that the module that you are writing should not for example explicitly output to a web page. \nThe module you are coding needs to be able to function without the web front end if need be. \nThe web front end is a way of making use of the module. \nFor example a \"getThread(x111)\" function call should instead of sending HTML send JSON which can be inserted into any \naccess channel. \n\nMore info on how this will be communicated to you, in due time.\n\n### **UI performance** - reactJs\nReactJS automatically updates the user interface when certain data changes, without reloading the whole page. \nSo this can for example be used while a page is open that is showing threads. \nAs threads are being posted, the user won't have to refresh, the threads will appear on the page as they come in. \nHave a look here: http://facebook.github.io/react/docs/why-react.html\n\n### **Internationalization** -  i18n-2 framework\nThe system should support all of the official languages of the University of Pretoria. \nThis framework will basically translate the website depending on which language the user's browser is set to. \nMore can be read about it here (including examples): https://github.com/jeresig/i18n-node-2\n\nMake sure your modules can integrate with this. But focus on this later, \ngetting a working English version is more important at this stage.\n\n### **Caching** - node-cache\nMany documents used throughout the system will no change very often. \nThese documents can be cached to improve performance. \nFor this we will be using a nodeJS package called node-cache. \nMore can be read about it here: https://github.com/ptarjan/node-cache\n\n### **CS LDAP Integration** - ldapJS\nThe Buzz System will have to get user information from the CS LDAP server, like user roles and email addresses. \nThis will be done using the ldapJS framework, which is used in conjunction with NodeJS. More info here: http://ldapjs.org/\n\n### **Email Notifications** - NodeMailer\nUsers can get notified of certain things like threads they subscribe to. \nTo do this we will use the NodeMailer JavaScript email client in NodeJS. \nMore information here: https://github.com/andris9/Nodemailer\n\n### **Logging** - Scribe.js\nCertain activities happening within the system will have to be logged. \nFor this we will use Scribe.js, in conjunction with node-aop. \nNode-aop intercepts whatever needs to be logged, and scribe does the logging. \nMore info here: https://github.com/bluejamesbond/Scribe.js/tree/master\n\n### **Reporting** - jsreport\nVarious reports will have to be created in the Buzz System, like reports for user activity etc. \nThis CAN be done with the assistance of the jsreport reporting framework. \nThis, as most of the other technologies we're using, runs in NodeJS. Read more here: http://jsreport.net/\n",
  "readmeFilename": "README.md",
  "_id": "application-name@0.0.1",
  "_shasum": "6292ecdb62d45c70a7ffdcdb7c25d88a6d05623b",
  "_from": "https://github.com/BuzzSpaceB/Authorization/tarball/master",
  "_resolved": "https://github.com/BuzzSpaceB/Authorization/tarball/master"
}
